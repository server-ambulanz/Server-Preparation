name: Backup to Backblaze B2

on:
  schedule:
    - cron: '0 */2 * * *'  # Alle 2 Stunden
  workflow_dispatch:        # Manuelle Ausführung bleibt erhalten

env:
  B2_BUCKET: ${{ secrets.B2_BUCKET_NAME }}
  B2_ACCOUNT_ID: ${{ secrets.B2_ACCOUNT_ID }}
  B2_APP_KEY: ${{ secrets.B2_APP_KEY }}

jobs:
  backup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Debug Environment
        run: |
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Branch: $GITHUB_REF"
          echo "Workspace: $GITHUB_WORKSPACE"
          echo "B2 Bucket: $B2_BUCKET"
          echo "B2 Account ID exists: ${{ env.B2_ACCOUNT_ID != '' }}"
          echo "Current directory content:"
          ls -la
      
      - name: Prepare backup directory
        run: |
          find . -name ".git" -type d -exec rm -rf {} +
          find . -name ".github" -type d -exec rm -rf {} +
          find . -name "node_modules" -type d -exec rm -rf {} +
          find . -name "vendor" -type d -exec rm -rf {} +
      
      - name: Install b2 CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install --upgrade b2
          b2 version
      
      - name: Authenticate with B2
        run: |
          echo "${{ env.B2_APP_KEY }}" | b2 account authorize ${{ env.B2_ACCOUNT_ID }}
      
      - name: Check and delete existing backup files
        run: |
          # Liste alle Dateien im Backup-Verzeichnis
          echo "Checking for existing files..."
          EXISTING_FILES=$(b2 ls --recursive --json "${{ env.B2_BUCKET }}" "backups/")
          
          # Lösche alle gefundenen Dateien
          if [ ! -z "$EXISTING_FILES" ]; then
            echo "Deleting existing backup files..."
            echo "$EXISTING_FILES" | while read -r line; do
              FILE_NAME=$(echo "$line" | jq -r '.fileName')
              FILE_ID=$(echo "$line" | jq -r '.fileId')
              if [[ $FILE_NAME == backups/* ]]; then
                echo "Deleting: $FILE_NAME"
                b2 delete-file-version "$FILE_NAME" "$FILE_ID"
              fi
            done
          fi

      - name: Upload files to B2
        run: |
          echo "Starting upload to bucket: ${{ env.B2_BUCKET }}"
          # Rekursives Hochladen aller Dateien
          for file in $(find . -type f); do
            if [[ $file != ./.* ]]; then  # Ignoriere versteckte Dateien/Ordner
              echo "Uploading: $file"
              b2 upload-file \
                "${{ env.B2_BUCKET }}" \
                "$file" \
                "backups/$file"
            fi
          done
          echo "Upload completed"