name: Backup to Backblaze B2

on:
  schedule:
    - cron: '0 */2 * * *'  # Alle 2 Stunden
  workflow_dispatch:        # Manuelle Ausführung bleibt erhalten

env:
  B2_BUCKET: ${{ secrets.B2_BUCKET_NAME }}
  B2_ACCOUNT_ID: ${{ secrets.B2_ACCOUNT_ID }}
  B2_APP_KEY: ${{ secrets.B2_APP_KEY }}

jobs:
  backup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Debug Environment
        run: |
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Branch: $GITHUB_REF"
          echo "Workspace: $GITHUB_WORKSPACE"
          echo "B2 Bucket: $B2_BUCKET"
          echo "B2 Account ID exists: ${{ env.B2_ACCOUNT_ID != '' }}"
          echo "Current directory content:"
          ls -la
      
      - name: Get Version Number
        id: version
        run: |
          # Erstelle Versionsdatei wenn sie nicht existiert
          if ! b2 download-file-by-name ${{ env.B2_BUCKET }} version.txt version.txt 2>/dev/null; then
            echo "1" > version.txt
          fi
          
          # Lese aktuelle Version und erhöhe sie um 1
          VERSION=$(($(cat version.txt) + 1))
          echo $VERSION > version.txt
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Lade neue Versionsnummer hoch
          b2 upload-file ${{ env.B2_BUCKET }} version.txt version.txt
      
      - name: Create archive name
        id: archive
        run: |
          echo "filename=server-onboarding_V${{ steps.version.outputs.version }}.tar.gz" >> $GITHUB_OUTPUT
          echo "Generated filename: server-onboarding_V${{ steps.version.outputs.version }}.tar.gz"
      
      - name: Create backup directory
        run: |
          mkdir -p /tmp/repo-backup
          cp -r . /tmp/repo-backup/
          find /tmp/repo-backup -name ".git" -type d -exec rm -rf {} +
          find /tmp/repo-backup -name ".github" -type d -exec rm -rf {} +
          find /tmp/repo-backup -name "node_modules" -type d -exec rm -rf {} +
          find /tmp/repo-backup -name "vendor" -type d -exec rm -rf {} +
      
      - name: Create TAR archive
        run: |
          cd /tmp
          tar -czf ${{ steps.archive.outputs.filename }} repo-backup/
          mv ${{ steps.archive.outputs.filename }} $GITHUB_WORKSPACE/
          cd $GITHUB_WORKSPACE
          echo "Archive size:"
          ls -lh ${{ steps.archive.outputs.filename }}
      
      - name: Install b2 CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install --upgrade b2
          b2 version
      
      - name: Authenticate with B2
        run: |
          echo "${{ env.B2_APP_KEY }}" | b2 account authorize ${{ env.B2_ACCOUNT_ID }}
      
      - name: Upload to Backblaze B2
        run: |
          echo "Starting upload to bucket: ${{ env.B2_BUCKET }}"
          b2 upload-file \
            ${{ env.B2_BUCKET }} \
            ${{ steps.archive.outputs.filename }} \
            backups/${{ steps.archive.outputs.filename }}
          echo "Upload completed"
      
      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up..."
          rm -f ${{ steps.archive.outputs.filename }}
          rm -f version.txt
          rm -rf /tmp/repo-backup